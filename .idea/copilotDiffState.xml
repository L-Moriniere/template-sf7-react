<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="originalContent" value="&#10;&#10;" />
              <option name="updatedContent" value="# Template Symfony 7 + React&#10;&#10;Ce projet est un template prêt à l’emploi pour développer une API Symfony 7 et un frontend React, orchestrés avec Docker et une base de données PostgreSQL.&#10;&#10;## Fonctionnalités&#10;- API backend avec Symfony 7&#10;- Frontend moderne avec React + Vite&#10;- Base de données PostgreSQL&#10;- Orchestration complète via Docker Compose&#10;- Hot reload pour le développement&#10;&#10;## Prérequis&#10;- [Docker](https://www.docker.com/) et [Docker Compose](https://docs.docker.com/compose/)&#10;- (Optionnel) Git pour le versionnement&#10;&#10;## Installation &amp; Démarrage&#10;&#10;1. **Cloner le projet**&#10;   ```bash&#10;   git clone https://github.com/votre-utilisateur/votre-repo.git&#10;   cd template-sf7-react&#10;   ```&#10;&#10;2. **Lancer les services Docker**&#10;   ```bash&#10;   docker-compose up --build&#10;   ```&#10;&#10;3. **Accéder aux applications**&#10;   - API Symfony : [http://localhost:8000](http://localhost:8000)&#10;   - Frontend React : [http://localhost:3000](http://localhost:3000)&#10;&#10;## Structure du projet&#10;```&#10;├── backend (API Symfony)&#10;├── frontend (React)&#10;├── docker-compose.yaml&#10;├── Dockerfile.backend&#10;├── frontend/Dockerfile.frontend&#10;├── migrations&#10;├── public&#10;├── src&#10;├── templates&#10;├── tests&#10;└── ...&#10;```&#10;&#10;## Outils de cleancode&#10;&#10;### Backend (Symfony / PHP)&#10;- **PHPStan** : Analyse statique du code PHP pour détecter les erreurs et améliorer la qualité.&#10;- **PHPUnit** : Framework de tests unitaires pour PHP.&#10;- **Symfony Coding Standards** : Respect des conventions de codage Symfony.&#10;&#10;### Frontend (React / JS/TS)&#10;- **ESLint** : Linter pour JavaScript/TypeScript afin d’assurer la qualité et la cohérence du code.&#10;- **Prettier** : Formateur de code pour garantir un style uniforme.&#10;- **TypeScript** : Typage statique pour sécuriser le code JS.&#10;&#10;Tous ces outils sont installés et exécutés automatiquement lors du build et du démarrage des conteneurs Docker.&#10;&#10;## Commandes utiles&#10;&#10;&gt; Les commandes suivantes sont automatisées par Docker : vous n’avez pas besoin de les lancer manuellement.&#10;&#10;- Installation des dépendances backend : `composer install`&#10;- Installation des dépendances frontend : `npm install` (dans le dossier frontend)&#10;- Analyse statique PHP : `php vendor/bin/phpstan analyse src`&#10;- Linter JS/TS : `npx eslint src/`&#10;- Formatage du code JS/TS : `npx prettier --check src/`&#10;- Lancer les tests Symfony : `php bin/phpunit`&#10;- Lancer le serveur React localement : `npm run dev` (dans frontend)&#10;&#10;## Commandes Makefile&#10;&#10;Voici les principales commandes disponibles via le Makefile :&#10;&#10;| Commande           | Description                                                        |&#10;|--------------------|--------------------------------------------------------------------|&#10;| `make up`          | Démarre les services Docker en arrière-plan                        |&#10;| `make build`       | Reconstruit et démarre les services Docker                         |&#10;| `make down`        | Arrête et supprime les conteneurs Docker                           |&#10;| `make restart`     | Redémarre les services Docker avec reconstruction                  |&#10;| `make backend-bash`| Ouvre un shell bash dans le conteneur backend                      |&#10;| `make frontend-bash`| Ouvre un shell sh dans le conteneur frontend                      |&#10;| `make migrate`     | Exécute les migrations Doctrine                                    |&#10;| `make fixtures`    | Charge les fixtures Doctrine                                       |&#10;| `make clear`       | Vide le cache Symfony                                              |&#10;| `make validate-db` | Valide la base de données Doctrine                                 |&#10;| `make create-db`   | Crée la base de données Doctrine                                   |&#10;| `make psql`        | Ouvre un shell psql dans le conteneur database                     |&#10;| `make frontend-install`| Installe les dépendances npm du frontend                        |&#10;| `make frontend-build`| Build le frontend React                                           |&#10;| `make frontend-dev`| Lance le serveur de développement React                            |&#10;&#10;Ces commandes facilitent la gestion du projet et l’administration des services Docker, du backend Symfony et du frontend React.&#10;&#10;## Variables d’environnement&#10;Les variables de la base de données sont configurables dans le fichier `docker-compose.yaml`.&#10;&#10;## Notes&#10;- Les dépendances et outils cleancode sont installés et exécutés automatiquement au démarrage des conteneurs.&#10;- Pour la production, adaptez les Dockerfile pour installer les dépendances lors du build.&#10;&#10;## Licence&#10;Ce projet est sous licence MIT (modifiable selon vos besoins).&#10;&#10;---&#10;&#10;&gt; Généré le 02/10/2025" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>